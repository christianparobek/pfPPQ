View(df)
data$turbid <- paste(data[,4], data[,5])
data
data <- cbind(time,sterile1,sterile2,turbid1,turbid2)
data$turbid <- cbind(data, paste(data[,4], data[,5]))
data
names(data)
data <- cbind(time,sterile1,sterile2,turbid1,turbid2)
qplot(time, turbid1, data=df, geom=c("point","smooth"))
qplot(time, turbid1, data=df, geom=c("point","smooth")) + geom_line(aes(y=df$turbid2))
qplot(time, turbid1, data=df, geom=c("point","smooth")) + geom_smooth(aes(y=df$turbid2))
qplot(time, turbid1, data=df, geom=c("point","smooth")) + geom_smooth(aes(y=df$turbid2)) + geom_point(aes(y=df$turbid2))
df$sterile1 <- df$sterile1/0.049
df
df$sterile <- (df$sterile1 + df$sterile2)/2
df$turbid <- (df$turbid1 + df$turbid2)/2
df
data <- cbind(time,sterile1,sterile2,turbid1,turbid2)
df <- data.frame(data)
df$sterile <- (df$sterile1 + df$sterile2)/2
df$turbid <- (df$turbid1 + df$turbid2)/2
df
df$growth <- turbid-sterile
df$growth <- df$turbid - df$sterile
df
df$sterile <- (df$sterile1 + df$sterile2)/2/100
df$turbid <- (df$turbid1 + df$turbid2)/2/100
df
data <- cbind(time,sterile1,sterile2,turbid1,turbid2)
df <- data.frame(data)
df$sterile <- (df$sterile1 + df$sterile2)/2/1000
df$turbid <- (df$turbid1 + df$turbid2)/2/1000
df
df$sterile/0.049
df$turbid/0.049
(df$turbid - df$sterile )/0.049
qplot(time, turbid1, data=df, geom=c("point","smooth")) + geom_smooth(aes(y=df$turbid2))
args(qplot)
vcf <- read.table("combined.filtered.vcf", comment.char = "#")
install.packages("Rmpi")
install.packages(c("digest", "highr", "knitr", "MASS", "RColorBrewer", "Rcpp", "reshape2"))
install.packages("ParallelStructure")
install.packages("sarallelstructure")
install.packages("parallelstructure")
install.packages("ParallelStructure", repos="http://R-Forge.R-project.org")
library("ParallelStructure", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
install.packages("rmpi")
install.packages("Rmpi")
install.packages("Rmpi")
install.packages("Rmpi")
library("bitops", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
genome10 <- read.delim("~/Desktop/genome10.txt", header=FALSE)
View(genome10)
hist(gnome10)
hist(genome10)
hist(genome10$V2)
genome10$V3 <- 1:48
dim(genome10)
genome10
plot(genome10$V2 ~ genome10$V3)
1:48
plot(genome10$V2 ~ genome10$V1)
genome10 <- genome10[with(genome10, order(V2)), ]
genome10 <- genome10[with(genome10, order(V2)), ]
plot(genome10$V2 ~ genome10$V1)
genome10\
genome10
plot(data$X10xCov ~ data$number, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1))
plot(genome10$V2 ~ genome10$V3, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1))
plot(genome10$V2 ~ genome10$V3, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1))
genome10 <- genome10[with(genome10, order(V2)), ]
genome10$V3 <- 1:48
plot(genome10$V2 ~ genome10$V3, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1))
axis(1, at=1:48, labels=genome10$V1, cex.lab=0.7)
plot(genome10$V2 ~ genome10$V3, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1))
axis(1, at=1:48, labels=genome10$V1, cex.lab=0.5)
plot(genome10$V2 ~ genome10$V3, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1))
axis(1, at=1:48, labels=genome10$V1, cex.lab=0.1)
axis(2, at=c(0.0,0.2,0.4,0.6,0.8,1.0))
plot(genome10$V2 ~ genome10$V3, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1), col="red")
axis(1, at=1:48, labels=genome10$V1, cex.lab=0.1)
axis(2, at=c(0.0,0.2,0.4,0.6,0.8,1.0))
plot(genome10$V2 ~ genome10$V3, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1), col="red", pch=18)
axis(1, at=1:48, labels=genome10$V1, cex.lab=0.1)
axis(2, at=c(0.0,0.2,0.4,0.6,0.8,1.0))
plot(genome10$V2 ~ genome10$V3, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1), col="red", pch=18)
plot(genome10$V2 ~ genome10$V3, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1), col="red", pch=19)
axis(1, at=1:48, labels=genome10$V1, cex.lab=0.1)
genome10 <- genome10[with(genome10, order(V2)), ]
genome10$V3 <- 1:48
plot(genome10$V2 ~ genome10$V3, axes=FALSE, xlab="Sample ID", ylab="Fraction of Genome Covered", ylim=c(0,1), col="red", pch=19)
axis(1, at=1:48, labels=genome10$V1, cex.lab=0.1)
axis(2, at=c(0.0,0.2,0.4,0.6,0.8,1.0))
install.packages("outbreaker", dependencies=TRUE)
library(outbreaker)
library(adegenet)
x<-seq(-4,4,length=200)
y<-dnorm(x,mean=0, sd=1)
plot(x,y, type="l", lwd=2)
x<-seq(0,100,length=101)
y<-dnorm(x,mean=50, sd=1)
plot(x,y, type="l", lwd=2)
x<-seq(0,100,length=101)
y<-dnorm(x,mean=50, sd=2)
plot(x,y, type="l", lwd=2)
x<-seq(0,100,length=101)
y<-dnorm(x,mean=50, sd=10)
plot(x,y, type="l", lwd=2)
x<-seq(0,100,length=101)
y<-dnorm(x,mean=50, sd=50)
plot(x,y, type="l", lwd=2)
x<-seq(0,100,length=101)
y<-dnorm(x,mean=50, sd=1)
plot(x,y, type="l", lwd=2)
x<-seq(0,100,length=101)
y<-dnorm(x,mean=50, sd=50)
plot(x,y, type="l", lwd=2)
y
w <- y
w
hist(Fws, breaks=14)
## LOAD REGEX LIBRARY
library(stringr)
## READ IN MULTI-VCF and REMOVE FIRST NINE COLUMNS
data <- read.table("test.vcf", comment.char="#", header=TRUE)
data <- data[ -c(1:9) ]
## EXTRACT RELEVANT READ DEPTH DATA, FIRST MATCH
refCT <- as.data.frame(sapply(data, function(x) str_extract(x, ":[0123456789]+,")))
# The numbers pre-comma are ref counts
# Convert to data frame on the fly
refCT <- sapply(refCT, function(x) str_extract(x, "[0123456789]+"))
# Clean out the extra chars, leaving only numbers
refCT <- apply(refCT, c(1,2), as.numeric)
# Convert to a numeric matrix
altCT <- as.data.frame(sapply(data, function(x) str_extract(x, ",[0123456789]+:")))
# The numbers post-comma are alt counts
# Convert to data frame on the fly
altCT <- sapply(altCT, function(x) str_extract(x, "[0123456789]+"))
# Clean out the extra chars, leaving only numbers
altCT <- apply(altCT, c(1,2), as.numeric)
# Convert to a numeric matrix
## CALCULATE qs, ps, and Hs, THE PROPORTIONS OF EACH ALLELE IN THE POPULATION
ps <- rowSums(refCT)/(rowSums(refCT)+rowSums(altCT))
qs <- rowSums(altCT)/(rowSums(refCT)+rowSums(altCT))
Hs <- mean(2*ps*qs)
# Calculate Hs for each variant and take the mean of all variants
## CALCULATE qw, pw, and Hw, THE PROPORTIONS OF EACH ALLELE IN EACH INDIVIDUAL
totCT <- refCT + altCT
# Make a matrix of total counts
pw <- matrix(, nrow = length(data$BB012), ncol = length(names(data)))
# Set up pw matrix
qw <- matrix(, nrow = length(data$BB012), ncol = length(names(data)))
# Set up qw matrix
Hw <- matrix(, nrow = length(data$BB012), ncol = length(names(data)))
# Set up Hw matrix
for (i in 1:length(names(data))) {
for (j in 1:length(data$BB012)) {
pw[j,i] <- refCT[j,i]/totCT[j,i] # Calculate pw per individual and per allele
qw[j,i] <- altCT[j,i]/totCT[j,i] # Calculate qw per individual and per allele
Hw[j,i] <- 2*pw[j,i]*qw[j,i] # Calculate Hw per individual and per allele
}
}
Hw <- colMeans(Hw)
# Take the column means of Hw matrix, to get a single Hw score for each sample
## CALCULATE Fws
Fws <- 1 - Hw/Hs
## LOAD REGEX LIBRARY
library(stringr)
## READ IN MULTI-VCF and REMOVE FIRST NINE COLUMNS
data <- read.table("test.vcf", comment.char="#", header=TRUE)
data <- data[ -c(1:9) ]
## EXTRACT RELEVANT READ DEPTH DATA, FIRST MATCH
refCT <- as.data.frame(sapply(data, function(x) str_extract(x, ":[0123456789]+,")))
# The numbers pre-comma are ref counts
# Convert to data frame on the fly
refCT <- sapply(refCT, function(x) str_extract(x, "[0123456789]+"))
# Clean out the extra chars, leaving only numbers
refCT <- apply(refCT, c(1,2), as.numeric)
# Convert to a numeric matrix
altCT <- as.data.frame(sapply(data, function(x) str_extract(x, ",[0123456789]+:")))
# The numbers post-comma are alt counts
# Convert to data frame on the fly
altCT <- sapply(altCT, function(x) str_extract(x, "[0123456789]+"))
# Clean out the extra chars, leaving only numbers
altCT <- apply(altCT, c(1,2), as.numeric)
# Convert to a numeric matrix
## CALCULATE qs, ps, and Hs, THE PROPORTIONS OF EACH ALLELE IN THE POPULATION
ps <- rowSums(refCT)/(rowSums(refCT)+rowSums(altCT))
qs <- rowSums(altCT)/(rowSums(refCT)+rowSums(altCT))
Hs <- mean(2*ps*qs)
# Calculate Hs for each variant and take the mean of all variants
## CALCULATE qw, pw, and Hw, THE PROPORTIONS OF EACH ALLELE IN EACH INDIVIDUAL
totCT <- refCT + altCT
# Make a matrix of total counts
pw <- matrix(, nrow = length(data$BB012), ncol = length(names(data)))
# Set up pw matrix
qw <- matrix(, nrow = length(data$BB012), ncol = length(names(data)))
# Set up qw matrix
Hw <- matrix(, nrow = length(data$BB012), ncol = length(names(data)))
# Set up Hw matrix
for (i in 1:length(names(data))) {
for (j in 1:length(data$BB012)) {
pw[j,i] <- refCT[j,i]/totCT[j,i] # Calculate pw per individual and per allele
qw[j,i] <- altCT[j,i]/totCT[j,i] # Calculate qw per individual and per allele
Hw[j,i] <- 2*pw[j,i]*qw[j,i] # Calculate Hw per individual and per allele
}
}
Hw <- colMeans(Hw)
# Take the column means of Hw matrix, to get a single Hw score for each sample
## CALCULATE Fws
Fws <- 1 - Hw/Hs
Hw
myFunction <- function(x)
result <- x*3
return(result)
myFunction <- function(x) {
result <- x*3
return(result)
}
myFunction(3)
## Function Practice
myFunction <- function(x) {
result <- x*3
#return(result)
}
myFunction(3)
result
## Function Practice
myFunction <- function(input, output) {
output <- input*3
return(output)
}
myFunction(x)
myFunction(x, var)
var
myFunction(x, data1)
data1
## Function Practice
myFunction <- function(input) {
result <- input*3
return(result)
}
myFunction(4)
value <- myFunction(4)
value
## Function Practice
myFunction <- function(input) {
green <- input*3
green*3
}
myFunction(3)
mean
mean()
?mean
intervals <- read.table("~/Desktop/intervals.txt", quote="\"")
View(intervals)
hist(intervals$V1)
hist(intervals$V1, breaks-10)
hist(intervals$V1, breaks=10)
hist(intervals$V1, breaks=20)
hist(intervals$V1, breaks=30)
hist(intervals$V1, breaks=40)
hist(intervals$V1, breaks=20)
hist(intervals$V1, breaks=20, xlim=c(0,80))
hist(intervals$V1, breaks=30, xlim=c(0,80))
hist(intervals$V1, breaks=20, xlim=c(0,80))
CLIN_A01_TAAGGCG.TAGATCG_L001 <- read.delim("~/Desktop/CLIN_A01_TAAGGCG-TAGATCG_L001.kraken", header=FALSE)
View(CLIN_A01_TAAGGCG.TAGATCG_L001)
View(CLIN_A01_TAAGGCG.TAGATCG_L001)
data <- CLIN_A01_TAAGGCG.TAGATCG_L001
View(data)
length(data$V3)
length(data$V3[data$V3 = 470])
length(data$V3[data$V3 == 470])
length(data$V3[data$V3 == 470]) / length(data$V3)
?pdf
pf_cam_pca
library(adegenet)
library(stringr)
## Function to create a genlight object from
## STRUCTURE file. VCF->STR using PGDSpider2
genlight.maker <- function(infile) {
table <- read.table(infile, skip=1, na.strings="-9") # read in data, missing is "-9" in str format
sorted <- table[order(table[,1]),] # sort
inds <- sorted$V1 # grab the indiv names
pops <- sorted$V2 # grab the pop names
sorted <- sorted[-c(1,2)] # remove ind and pop columns from data frame
genlight <- new("genlight", sorted) # convert data frame into genlight object
indNames(genlight) <- inds # add back individual information
ploidy(genlight) <- 1 # add back population information
return(genlight)
}
## Function to assign samples to pops
## based on a list of their names
pop.definer <- function(ind_names) {
library(stringr)
kp <- as.numeric(str_detect(ind_names, "BB"))*1 # assign KP pop number
bb <- as.numeric(str_detect(ind_names, "KP"))*2 # assign BB pop number
om <- as.numeric(str_detect(ind_names, "OM"))*3 # assign OM pop number
sn <- as.numeric(str_detect(ind_names, "SN"))*3 # assign SN pop number
tb <- as.numeric(str_detect(ind_names, "TB"))*3 # assign TB pop number
srr <- as.numeric(str_detect(ind_names, "SRR"))*4 # assign SRR pop number
err <- as.numeric(str_detect(ind_names, "ERR"))*4 # assign ERR pop number
pops <- kp + bb + om + sn + tb + srr + err
return(pops)
}
# Function to mark hi IC50 samples, given a vector of samples and of IC50s
ic50.marker <- function(ind_names, hi_ic50s) {
library(stringr)
ic <- as.numeric(str_detect(ind_names, paste(hi_ic50s, sep = "", collapse = "|")))
return(ic)
}
## Function to record eigenplots
eig.plotter <- function(pca) {
barplot(pca$eig, xlab = "", ylab = "Variance")
}
## Function to record PCAs
pca.plotter <- function(pca, pops, x, y) {
plot(jitter(pca$scores[,y], factor=300) ~ jitter(pca$scores[,x], factor=300),
col=pops,
pch=19,
axes=FALSE,
xlab=paste("PC", x, " - ", round(pca$eig[x]/sum(pca$eig)*100), "% of the Variance", sep = ""),
ylab=paste("PC", y, " - ", round(pca$eig[y]/sum(pca$eig)*100), "% of the Variance", sep = ""),
)
axis(1)
axis(2)
}
pf_cam_gl <- genlight.maker("/run/user/1001/gvfs/sftp:host=kure.unc.edu,user=prchrist/proj/julianog/users/ChristianP/cambodiaWGS/adegenet/our_goods_pf.pass.str") # make genlight
pf_cam_pops <- pop.definer(indNames(pf_cam_gl)) # define pops OR
pf_cam_pca <- glPca(pf_cam_gl) # calculate PCA
pf_cam_pca
library(pegas)
args(read.vcf)
loci <- read.vcf("/run/user/1001/gvfs/sftp:host=kure.unc.edu,user=prchrist/proj/julianog/users/ChristianP/cambodiaWGS/pf/variants/our_goods_UG.pass.vcf", nloci=100)
View(loci)
gl_test <- as.genlight(loci)
class(loci)
install.packages(c("ade4", "adegenet", "ape", "chron", "codetools", "colorspace", "evaluate", "formatR", "ggplot2", "highr", "httpuv", "igraph", "knitr", "manipulate", "markdown", "MASS", "mime", "pegas", "phangorn", "plyr", "PopGenome", "R6", "Rcpp", "rmarkdown", "R.utils", "scales", "shiny", "stringr"))
install.packages(c("ade4", "adegenet", "ape", "chron", "codetools",
install.packages(c("ade4", "adegenet", "ape", "chron", "codetools", "colorspace", "evaluate", "formatR", "ggplot2", "highr", "httpuv", "igraph", "knitr", "manipulate", "markdown", "MASS", "mime", "pegas", "phangorn", "plyr", "PopGenome", "R6", "Rcpp", "rmarkdown", "R.utils", "scales", "shiny", "stringr"))
library(adegenet)
install.packages("adegenet")
library(adegenet)
install.packages("adegenet")
install.packages("dplyr")
install.packages("dplyr")
updateR()
install.packages("dplyr")
install.packages("adegenet")
install.packages("ape")
install.packages("adegenet")
library(adegenet)
install.packages("pegas")
library(pegas)
args(read.vcf)
loci <- read.vcf("/run/user/1001/gvfs/sftp:host=kure.unc.edu,user=prchrist/proj/julianog/users/ChristianP/cambodiaWGS/pf/variants/our_goods_UG.pass.vcf", nloci=100)
loci <- read.vcf("/run/user/1001/gvfs/sftp:host=kure.unc.edu,user=prchrist/proj/julianog/users/ChristianP/cambodiaWGS/pf/variants/our_goods_UG.pass.vcf")
View(loci)
gl <- as.genlight(loci)
scr_table <- read.table("/run/user/1001/gvfs/sftp:host=kure.unc.edu,user=prchrist/proj/julianog/users/ChristianP/cambodiaWGS/adegenet/our_goods_pf.pass.str", skip=1, na.strings="-9") # read in data, missing is "-9" in str format
View(scr_table)
inds <- sorted$V1 # grab the indiv names
inds
inds <- sorted$V1 # grab the indiv names
inds <- scr_table$V1
inds
scr_table <- scr_table[-c(1,2)]
View(scr_table)
inds <- loci$V1
inds
inds <- rownames(loci)
genlight <- new("genlight", loci)
genlight
genlight@ind.names
## Function to create genlight from VCF.
genlight.maker <- function(infile) {
loci <- read.vcf(infile)
genlight <- new("genlight", loci) # convert data frame into genlight object
ploidy(genlight) <- 1 # add back population information
return(genlight)
}
## Function to assign samples to pops
## based on a list of their names
pop.definer <- function(ind_names) {
kp <- as.numeric(str_detect(ind_names, "BB"))*1 # assign KP pop number
bb <- as.numeric(str_detect(ind_names, "KP"))*2 # assign BB pop number
om <- as.numeric(str_detect(ind_names, "OM"))*3 # assign OM pop number
sn <- as.numeric(str_detect(ind_names, "SN"))*3 # assign SN pop number
tb <- as.numeric(str_detect(ind_names, "TB"))*3 # assign TB pop number
srr <- as.numeric(str_detect(ind_names, "SRR"))*4 # assign SRR pop number
err <- as.numeric(str_detect(ind_names, "ERR"))*4 # assign ERR pop number
pops <- kp + bb + om + sn + tb + srr + err
return(pops)
}
# Function to mark hi IC50 samples, given a vector of samples and of IC50s
ic50.marker <- function(ind_names, hi_ic50s) {
ic <- as.numeric(str_detect(ind_names, paste(hi_ic50s, sep = "", collapse = "|")))
return(ic)
}
## Function to record eigenplots
eig.plotter <- function(pca) {
barplot(pca$eig, xlab = "", ylab = "Variance")
}
## Function to record PCAs
pca.plotter <- function(pca, pops, x, y) {
plot(jitter(pca$scores[,y], factor=300) ~ jitter(pca$scores[,x], factor=300),
col=pops,
pch=19,
axes=FALSE,
xlab=paste("PC", x, " - ", round(pca$eig[x]/sum(pca$eig)*100), "% of the Variance", sep = ""),
ylab=paste("PC", y, " - ", round(pca$eig[y]/sum(pca$eig)*100), "% of the Variance", sep = ""),
)
axis(1)
axis(2)
}
pf_cam_gl <- genlight.maker("/run/user/1001/gvfs/sftp:host=kure.unc.edu,user=prchrist/proj/julianog/users/ChristianP/cambodiaWGS/pf/variants/our_goods_UG.pass.vcf") # make genlight
pf_cam_pops <- pop.definer(indNames(pf_cam_gl)) # define pops OR
library(stringr)
pf_cam_pops <- pop.definer(indNames(pf_cam_gl)) # define pops OR
pf_cam_pca <- glPca(pf_cam_gl) # calculate PCA
pca.plotter(pf_cam_pca, pf_cam_pops + 1, 1, 2)
legend(-80, -30, legend = c("IC50 top 25% ", "IC50 bottom 75%"), col = c("red", "black"), pch=19, bty="n", cex=1.5)
legend(-5, -15, legend = c("IC50 top 25% ", "IC50 bottom 75%"), col = c("red", "black"), pch=19, bty="n", cex=1.5)
legend(-15, -5, legend = c("IC50 top 25% ", "IC50 bottom 75%"), col = c("red", "black"), pch=19, bty="n", cex=1)
legend(-15, -5, legend = c("Battambang", "Oddar Meanchey"), col = c("red", "blue"), pch=19, bty="n", cex=1)
pca.plotter(pf_cam_pca, pf_cam_pops + 1, 1, 2)
title(substitute(paste("Cambodian " italic('P. falciparum'), " Isolates by Province" )), line = -0.5, cex.main=1.5)
legend(-15, -5, legend = c("Battambang", "Oddar Meanchey"), col = c("red", "blue"), pch=19, bty="n", cex=1)
legend(-15, -5, legend = c("Battambang", "Oddar Meanchey", "Kampot"), col = c("red", "blue", "green"), pch=19, bty="n", cex=1)
pca.plotter(pf_cam_pca, pf_cam_pops + 1, 1, 2)
title(substitute(paste("Cambodian " italic('P. falciparum'), " Isolates by Province" )), line = -0.5, cex.main=1.5)
legend(-15, -5, legend = c("Battambang", "Oddar Meanchey", "Kampot"), col = c("red", "blue", "green"), pch=19, bty="n", cex=1)
legend(-15, -5, legend = c("Battambang", "Oddar Meanchey", "Kampot"), col = c("red", "blue", "green"), pch=19, bty="n", cex=1.2)
### OR ###
title(substitute(paste("Cambodian " italic('P. falciparum'), " Isolates by Province" )), line = -0.5, cex.main=1.5)
legend(-15, -5, legend = c("Battambang", "Oddar Meanchey", "Kampot"), col = c("red", "blue", "green"), pch=19, bty="n", cex=1.2)
pca.plotter(pf_cam_pca, pf_cam_pops + 1, 1, 2)
### OR ###
title(substitute(paste("Cambodian " italic('P. falciparum'), " Isolates by Province" )), line = -0.5, cex.main=1.5)
legend(-15, -5, legend = c("Battambang", "Oddar Meanchey", "Kampot"), col = c("red", "blue", "green"), pch=19, bty="n", cex=1.2)
legend(-12, -5, legend = c("Battambang", "Oddar Meanchey", "Kampot"), col = c("red", "blue", "green"), pch=19, bty="n", cex=1.2)
pca.plotter(pf_cam_pca, pf_cam_pops + 1, 1, 2)
title(substitute(paste("Cambodian " italic('P. falciparum'), " Isolates by Province" )), line = -0.5, cex.main=1.5)
legend(-12, -5, legend = c("Battambang", "Oddar Meanchey", "Kampot"), col = c("red", "blue", "green"), pch=19, bty="n", cex=1.2)
## Function to record PCAs
pca.plotter <- function(pca, pops, x, y) {
plot(jitter(pca$scores[,y], factor=500) ~ jitter(pca$scores[,x], factor=500),
col=pops,
pch=19,
axes=FALSE,
xlab=paste("PC", x, " - ", round(pca$eig[x]/sum(pca$eig)*100), "% of the Variance", sep = ""),
ylab=paste("PC", y, " - ", round(pca$eig[y]/sum(pca$eig)*100), "% of the Variance", sep = ""),
)
axis(1)
axis(2)
}
pca.plotter(pf_cam_pca, pf_cam_pops + 1, 1, 2)
title(substitute(paste("Cambodian " italic('P. falciparum'), " Isolates by Province" )), line = -0.5, cex.main=1.5)
legend(-12, -5, legend = c("Battambang", "Oddar Meanchey", "Kampot"), col = c("red", "blue", "green"), pch=19, bty="n", cex=1.2)
title(substitute(paste("Cambodian ", italic('P. falciparum'), " Isolates by Province" )), line = -0.5, cex.main=1.5)
title(substitute(paste("Cambodian ", italic('P. falciparum'), " Isolates by Province" )), line = -0.5, cex.main=1.2)
pca.plotter(pf_cam_pca, pf_cam_pops + 1, 1, 2)
title(substitute(paste("Cambodian ", italic('P. falciparum'), " Isolates by Province" )), line = -0.5, cex.main=1.2)
legend(-12, -5, legend = c("Battambang", "Oddar Meanchey", "Kampot"), col = c("red", "blue", "green"), pch=19, bty="n", cex=1.2)
## Function to record PCAs
pca.plotter <- function(pca, pops, x, y) {
plot(jitter(pca$scores[,y], factor=700) ~ jitter(pca$scores[,x], factor=700),
col=pops,
pch=19,
axes=FALSE,
xlab=paste("PC", x, " - ", round(pca$eig[x]/sum(pca$eig)*100), "% of the Variance", sep = ""),
ylab=paste("PC", y, " - ", round(pca$eig[y]/sum(pca$eig)*100), "% of the Variance", sep = ""),
)
axis(1)
axis(2)
}
pca.plotter(pf_cam_pca, pf_cam_pops + 1, 1, 2)
title(substitute(paste("Cambodian ", italic('P. falciparum'), " Isolates by Province" )), line = -0.5, cex.main=1.2)
legend(-12, -5, legend = c("Battambang", "Oddar Meanchey", "Kampot"), col = c("red", "blue", "green"), pch=19, bty="n", cex=1.2)
dim(pf_cam_pca$scores)
pf_cam_pca$scores
setwd("/run/user/1001/gvfs/sftp:host=kure.unc.edu,user=prchrist/proj/julianog/users/ChristianP/pfPPQ")
groups <- read.table("four_groups_v2.txt")
backbone <- read.table("backbone.txt")
?read.table
?read.table
read.table()
backbone <- read.table("backbone.txt", na.strings="")
backbone <- read.table("backbone.txt", na.strings="", sep="\t")
backbone <- read.table("backbone.txt", sep="\t")
backbone <- read.table("backbone.txt", sep='\t')
backbone <- read.table("backbone.txt", sep='\t', na.strings='')
backbone <- read.table("backbone.txt", sep='\t', na.strings='')
backbone <- read.table("backbone.txt", sep='\t', na.strings='')
class(groups)
groups[1,]
groups[,1]
groups[,2]
backbone[,1]
match(backbone[,1], groups[,2])
order(match(backbone[,1], groups[,2]))
backbone[order(match(backbone[,1], groups[,2])),]
backbone <- backbone[order(match(backbone[,1], groups[,2])),]
cbind(groups, backbone)
dim(groups)
groups
groups <- read.table("four_groups_v2.txt", header=TRUE)
backbone <- read.table("backbone.txt", sep='\t', na.strings='')
# Want to sort "backbone" by second column of "groups"
backbone <- backbone[order(match(backbone[,1], groups[,2])),]
cbind(groups, backbone)
